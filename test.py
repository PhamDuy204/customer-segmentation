import streamlit as st
import pandas as pd
import joblib
import numpy as np
from pathlib import Path

# Thi·∫øt l·∫≠p c·∫•u h√¨nh giao di·ªán
st.set_page_config(page_title="Customer RFM Prediction", layout="wide", page_icon="üìä")

# CSS ƒë·ªÉ t√πy ch·ªânh giao di·ªán
st.markdown("""
<style>
    .main {
        background-color: #f0f2f6;
        padding: 20px;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
    }
    .stTextInput>div>input {
        border-radius: 8px;
        padding: 8px;
    }
    .stDataFrame {
        border-radius: 10px;
        overflow: hidden;
    }
    .header {
        background: linear-gradient(90deg, #4CAF50, #2196F3);
        padding: 20px;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 20px;
    }
</style>
""", unsafe_allow_html=True)

# Load m√¥ h√¨nh
@st.cache_resource
def load_model():
    model_path = Path("model.pkl")
    if not model_path.exists():
        st.error("File model.pkl kh√¥ng t·ªìn t·∫°i!")
        return None
    return joblib.load(model_path)

# Load d·ªØ li·ªáu CSV
def load_data():
    try:
        df = pd.read_csv("rfm.csv")
        return df
    except FileNotFoundError:
        st.error("File CSV kh√¥ng t·ªìn t·∫°i!")
        return None

class_to_label = {
    0: 'At_risk',
    1: 'Hibernate',
    2: 'High_spender',
    3: 'Regular',
    4: 'Loyal'
}

model = load_model()
df = load_data()

# Ki·ªÉm tra n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu
if df is None:
    st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu kh√°ch h√†ng. Vui l√≤ng ki·ªÉm tra file rfm.csv v√† th·ª≠ l·∫°i.")
    st.stop()  # D·ª´ng to√†n b·ªô ·ª©ng d·ª•ng n·∫øu d·ªØ li·ªáu kh√¥ng t·∫£i ƒë∆∞·ª£c

# X·ª≠ l√Ω d·ªØ li·ªáu
df['Member_number'] = df['Member_number'].astype(str)
df['Class'] = model.predict(df[['Recency', 'Frequency', 'Monetary']]).astype(int)
df['Class'] = df['Class'].map(class_to_label)

# Kh·ªüi t·∫°o max_id trong session_state
if "value" not in st.session_state:
    st.session_state.value = df['Member_number'].astype(int).max()

min_id = df['Member_number'].astype(int).min()
max_id = df['Member_number'].astype(int).max()
# Header
st.markdown('<div class="header"><h1>Customer RFM Prediction Dashboard</h1></div>', unsafe_allow_html=True)

# Sidebar
st.sidebar.header("Navigation")
menu = st.sidebar.radio("Ch·ªçn ch·ª©c nƒÉng:", ["Homepage", "Predict RFM", "Add New Customers", "Search Customer"])

# Ch·ª©c nƒÉng 1: Homepage
if menu == "Homepage":
    st.subheader("Homepage")
    
    # Ph·∫ßn Overview
    st.markdown("""
    <div class="overview">
        <h2>Gi·ªõi thi·ªáu</h2>
        <p><strong>Th√†nh vi√™n d·ª± √°n:</strong> Ph·∫°m ƒê√¨nh Anh Duy, Ch√¢u Nh·∫≠t Minh</p>
        <p><strong>M√¥ t·∫£ trang web:</strong> Trang web n√†y ph·ª•c v·ª• c√°c ch·ªß c·ª≠a h√†ng c√≥ th·ªÉ ph√¢n lo·∫°i kh√°ch h√†ng th√†nh c√°c ph√¢n kh√∫c d·ª±a tr√™n c√°c ch·ªâ s·ªë RFM (Recency, Frequency, Monetary). Trong d·ª± √°n n√†y, ch√∫ng t√¥i s·ª≠ d·ª•ng thu·∫≠t to√°n K-Means ƒë·ªÉ ph√¢n kh√°ch h√†ng th√†nh 5 ph√¢n kh√∫c (At_risk, Hibernate, High_spender, Regular, Loyal) v√† √°p d·ª•ng Decision Tree ƒë·ªÉ ƒë∆∞a ra c√°c rule nh·∫±m ph√¢n lo·∫°i kh√°ch h√†ng m·ªôt c√°ch ch√≠nh x√°c.</p>
        <p><strong>C√°c ch·ª©c nƒÉng ch√≠nh:</strong></p>
        <ul>
            <li><strong>Predict RFM:</strong> D·ª± ƒëo√°n ph√¢n kh√∫c kh√°ch h√†ng d·ª±a tr√™n c√°c gi√° tr·ªã RFM nh·∫≠p v√†o.</li>
            <li><strong>Add New Customers:</strong> Th√™m kh√°ch h√†ng m·ªõi v√† d·ª± ƒëo√°n ph√¢n kh√∫c c·ªßa h·ªç.</li>
            <li><strong>Search Customer:</strong> T√¨m ki·∫øm v√† xem th√¥ng tin chi ti·∫øt c·ªßa kh√°ch h√†ng theo Member ID.</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # Ph·∫ßn h√¨nh ·∫£nh demo
    st.markdown("### Demo c√°c ch·ª©c nƒÉng")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.image("./public/predict_rfm_demo.png", use_container_width=True)
    with col2:
        st.image("./public/add_customers_demo.png", use_container_width=True)
    with col3:
        st.image("./public/search_customer_demo.png", use_container_width=True)
    
    # Ph·∫ßn hi·ªÉn th·ªã ng·∫´u nhi√™n 5 kh√°ch h√†ng
    st.markdown("### Ng·∫´u nhi√™n 5 kh√°ch h√†ng")
    if st.button("Hi·ªÉn th·ªã ng·∫´u nhi√™n 5 kh√°ch h√†ng"):
        random_customers = df.sample(5, random_state=None)
        st.dataframe(random_customers, use_container_width=True)

# Ch·ª©c nƒÉng 2: D·ª± ƒëo√°n RFM t·ª´ input ng∆∞·ªùi d√πng
elif menu == "Predict RFM":
    st.subheader("Predict Customer Class")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        r = st.number_input("Recency (R)", min_value=1, max_value=1000, value=1, step=1)
    with col2:
        f = st.number_input("Frequency (F)", min_value=1, max_value=90, value=1, step=1)
    with col3:
        m = st.number_input("Monetary (M)", min_value=1.0, max_value=2000.0, value=1.0, step=0.01)
    
    if st.button("Predict"):
        if model is not None:
            try:
                input_data = {'Recency': [r], 'Frequency': [f], 'Monetary': [m]}
                input_df = pd.DataFrame(input_data)
                prediction = model.predict(input_df)[0]
                st.success(f"Predicted Class: {class_to_label[int(prediction)]}")
            except Exception as e:
                st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")
        else:
            st.error("M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c t·∫£i.")

# Ch·ª©c nƒÉng 3: Th√™m v√† d·ª± ƒëo√°n cho kh√°ch h√†ng m·ªõi
elif menu == "Add New Customers":
    st.subheader("Add and Predict for New Customers")
    
    # Hi·ªÉn th·ªã ph·∫°m vi Member_number hi·ªán t·∫°i
    st.info(f"Current Member_number range: {min_id} to {st.session_state.value}")

    # Thanh tr∆∞·ª£t ch·ªçn s·ªë l∆∞·ª£ng kh√°ch h√†ng
    num_customers = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng kh√°ch h√†ng mu·ªën th√™m", min_value=1, max_value=10, value=5)
    new_customers = []
    for i in range(num_customers):
        st.markdown(f"**Customer {i+1}**")
        # T·ª± ƒë·ªông sinh MemberID m·ªõi
        new_member_id = st.session_state.value + 1 + i
        st.write(f"Member ID: {new_member_id}")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            r = st.number_input(f"R {i+1}", min_value=1, max_value=1000, value=1, step=1, key=f"r_{i}")
        with col2:
            f = st.number_input(f"F {i+1}", min_value=1, max_value=90, value=1, step=1, key=f"f_{i}")
        with col3:
            m = st.number_input(f"M {i+1}", min_value=1.0, max_value=2000.0, value=1.0, step=0.01, key=f"m_{i}")
        
        new_customers.append({'Member_number': str(new_member_id), 'Recency': r, 'Frequency': f, 'Monetary': m})
    
    if st.button("Add and Predict"):
        try:
            new_df = pd.DataFrame(new_customers)
            predictions = model.predict(new_df[['Recency', 'Frequency', 'Monetary']])
            new_df['Class'] = [class_to_label[int(p)] for p in predictions]
            df = pd.concat([df, new_df], axis=0, ignore_index=True)
            df.to_csv("rfm.csv", index=False)
            st.success("Th√™m v√† d·ª± ƒëo√°n th√†nh c√¥ng!")
            st.write("**New Customers with Predictions:**")
            st.dataframe(new_df, use_container_width=True)

        except Exception as e:
            st.error(f"L·ªói khi th√™m v√† d·ª± ƒëo√°n: {e}")
    if st.button("Update Member ID"):
        st.session_state.value += num_customers
        st.success(f"C·∫≠p nh·∫≠t Member ID th√†nh c√¥ng! Gi√° tr·ªã m·ªõi l√†: {st.session_state.value}")
        st.rerun()

# Ch·ª©c nƒÉng 4: T√¨m ki·∫øm kh√°ch h√†ng v√† d·ª± ƒëo√°n class
elif menu == "Search Customer":
    df = load_data()
    st.subheader("Search Customer by Member ID")
    member_ids = list(range(min_id,st.session_state.value + 1))
    selected_id = st.selectbox("Select Member ID", member_ids)
    if st.button("Search"):
        df['Member_number'] = df['Member_number'].astype(str)
        customer = df[df['Member_number'] == str(selected_id)]
        if not customer.empty:
            rfm = customer[['Recency', 'Frequency', 'Monetary']]
            prediction = model.predict(rfm)[0]
            st.write("**Customer Details:**")
            st.dataframe(customer[['Member_number', 'Recency', 'Frequency', 'Monetary', 'Class']], use_container_width=True)
            st.success(f"Predicted Class: {class_to_label[int(prediction)]}")
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi ID n√†y.")

# Footer
st.markdown("---")
st.markdown("**CSC EDU**")